#!/bin/bash

### Default config ###
PK=0                            # 0 = Use SSHPASS; 1 = Use private key
COMPRESSOR="lzop -1"            # The default compressor.  When in doubt, use this.
VERIFY=1                        # Do a rsync after the copy to sync files that changed and ensure integrity
RESUME=1                        # Default to resuming the transfer.
PORT=65432                      # The default port for file transfers.
BLOCKSIZE=65536                 # TAR Record size, Socat block size, and other things that should be synced.
TIMEOUT=60                      # Number of seconds of allowed inactivity
BUF=1048576                     # Send and Receive buffer
ENCRYPTOR=cat                   # Change to "openssl enc -e" to encrypt the connection
DECRYPTOR=cat                   # Change to "openssl enc -d" to encrypt the connection
### End config ###

WORK=`mktemp -p /tmp -d filefox.XXXXXXXXX`
export PK COMPRESSOR ENCRYPTOR DECRYPTOR VERIFY RESUME BLOCKSIZE TIMEOUT BUF PORT WORK

remote () {
 if [ "$PK" = "0" ] || [ "$PK" = "" ]; then
  echo "sshpass -e ssh -E $WORK/log $USERHOST"
 else
  echo "ssh -E $WORK/log $USERHOST"
 fi
}

halp () {
echo "$(basename $0): The fastest way to get from here to there."
echo "Version 2.04 (C) 2018 Alynna Trypnotk; GPL3"
cat << EOF
 Syntax:
  filefox [options] <user@host> <local-dir> <remote-dir>
 Options:
  -n; --new             Start transfer fresh without finding out what files exist in the destination.
                        Best for starting a new transfer.
  -r; --resume          (DEFAULT) Scan the destination for the existence of files and skip them.
                        WARNING: does not compare times, file sizes, or file integrity.
  -v; --verify          (DEFAULT) Check the copy with rsync after doing the copy.  This occurs at the
                        end of the copy and is used with 'fast' to copy any files that changed and make
                        sure that the copy is good.
  -v0; --no-verify      Skip rsync verification check after copy.
  -y; --encrypt         Pipe through OpenSSL encryption (Slower)
  -y0; --no-encrypt     (DEFAULT) Do not encrypt (Fast)
  --compressor="<prog>" Uses a different compressor than the default "lzop -1".
  -c="<prog>"           This can be any stream based compressor on your system that uses the -d option
                        to specify decompression.
  -k; --privatekey      Do not ask for an SSH password at the beginning, assume private key present.
  -w; --password        (DEFAULT) Ask for an ssh password and attempt to use it via SSHPASS.
  -q; --prerequisites   Install prerequisite programs.  Works on debian based systems.  For other
EOF
echo "  -p=<port>             Connect on different port"
echo "  --port=<port>          Default port: $PORT"
echo "  -s=<blocksize>        Set blocksize of TAR records and socat transfer size"
echo "  --blocksize=<port>     Default blocksize: $BLOCKSIZE"
echo "  -b=<bufsize>          Total TCP buffer size"
echo "  --buffer=<bufsize>     Default buffer size: $BUF"
echo "  -t=<secs>             Total inactivity tolerance"
echo "  --timeout=<port>       Default inactivity tolerance: $TIMEOUT"
}

install-deps () {
 # Install dependencies if necessary
 if [ "$(which nc)" = "" ]; then apt -y install netcat-openbsd; fi
 if [ "$(which pv)" = "" ]; then apt -y install pv; fi
 if [ "$(which sshpass)" = "" ]; then apt -y install sshpass; fi
 if [ "$(which lzop)" = "" ]; then apt -y install lzop; fi
 if [ "$(which ssh)" = "" ]; then apt -y install ssh; fi
 if [ "$(which rsync)" = "" ]; then apt -y install rsync; fi
}

loop-through-opts () {
for i in "$@"; do
 case $i in
  -n|-r0|-n1|--new) 
   RESUME=0
   shift
  ;;
  -r|-r1|-n0|--resume) 
   RESUME=1
   shift
  ;;
  -v|-v1|--verify) 
   VERIFY=1
   shift
  ;;
  -v0|--no-verify) 
   VERIFY=0
   shift
  ;;
  -c=*|--compressor=*)
   COMPRESSOR="${i#*=}"
   shift
  ;;
  -y|-y1|--encrypt)
   ENCRYPTOR="openssl enc -e"
   DECRYPTOR="openssl enc -d"
   shift
  ;;
  -y0|--no-encrypt)
   ENCRYPTOR="cat"
   DECRYPTOR="cat"
   shift
  ;;
  -h|--help)
   halp
   exit 1
   shift
  ;;
  -k|--privatekey)
   PK=1
   shift
  ;;
  -w|--password)
   PK=0
   shift
  ;;
  -q|--prerequisites)
   install-deps
   exit 1
   shift
  ;;
  -p=*|--port=*)
   PORT=${i#*=}
   shift
  ;;
  -b=*|--buffer=*)
   BUF=${i#*=}
   shift
  ;;
  -s=*|--blocksize=*)
   BLOCKSIZE=${i#*=}
   shift
  ;;
  -t=*|--timeout=*)
   TIMEOUT=${i#*=}
   shift
  ;;
  *)
   if [ "$USERHOST" = "" ]; then USERHOST=$i; shift;
   elif [ "$SRC" = "" ];    then SRC=$i;      shift;
   elif [ "$DST" = "" ];    then DST=$i;      shift;
   else (echo "!!! There seems to be an issue with your Options." >&2); shift; exit 2
   fi
  ;;
 esac
done
export PK COMPRESSOR ENCRYPTOR DECRYPTOR VERIFY RESUME BLOCKSIZE TIMEOUT BUF PORT WORK
}

exclusion-list () {
 if [ "$RESUME" = "0" ]; then
  echo ">>> Starting new transfer."
  touch $WORK/exclude-list
 else
  echo ">>> Getting files already transferred ..."
  $(remote) "find $DST -type f -printf \"%P\n\"" | pv -w100 -l -F "[%t]: Remote files found [%b]; Transfer Rate: C:%r a:%a  %p" > $WORK/exclude-list
 fi
}

finish-up () {
 sleep 2
 $(remote) "pkill -TERM -f $WORK" >/dev/null 2>&1
 if [ "$WORK" != "" ]; then
  rm --preserve-root $WORK/*
  rmdir $WORK
 fi
 pkill -TERM -f "$WORK" >/dev/null 2>&1
 unset SSHPASS PK COMPRESSOR ENCRYPTOR DECRYPTOR VERIFY RESUME BLOCKSIZE TIMEOUT BUF PORT WORK
}

datapipe () {
 P=`echo -n -e "\033[80C"`
 pv -w80 -bF "[%t]: C:%r A:%a  [%b] DATA >%p> LINE " | \
 $COMPRESSOR | $ENCRYPTOR | \
 pv -w60 -bF "${P}[%b] C:%r A:%a"
}

# Main Screen Turn On.
loop-through-opts $@; if [ "$?" = "1" ]; then exit 0; fi

if [ "$PK" = "0" ] || [ "$PK" = "" ]; then 
 read -s -p "Password: " SSHPASS
 export SSHPASS
fi

echo ">>> From $SRC to $DST via $USERHOST:$PORT"
echo ">>> Resume: $RESUME  Verify: $VERIFY  Compression: $COMPRESSOR   Private key: $PK"
echo ">>> Socket opts:  TIMEOUT=$TIMEOUT   BLOCKSIZE=$BLOCKSIZE   BUFSIZE=$BUF"
read -p ">>>>>> Press a key to continue, Ctrl-C to abort, or wait 5 seconds" -t 5 -n 1

exclusion-list

# Note you are responsible for ensuring that the remote side has any compresor other than lzop
$(remote) 'if [ "$(which lzop)" = "" ]; then apt -y install lzop; fi' 2>&1
$(remote) 'if [ "$(which socat)" = "" ]; then apt -y install socat; fi' 2>&1
echo ">>> Begin transfer ..."
$(remote) "mkdir -p $DST"
$(remote) "socat -lp$WORK -u -t$TIMEOUT -T$TIMEOUT tcp-listen:$PORT,rcvbuf=$BUF,sndbuf=$BUF - \
 | $DECRYPTOR | $COMPRESSOR -d | tar --posix -p --numeric-owner -C $DST/ -xv 2>&1" &
sleep 1

tar -C $SRC -X $WORK/exclude-list --ignore-failed-read --posix -p --record-size=$BLOCKSIZE --numeric-owner -c ./ | datapipe | \
 socat -u -t1 -T$TIMEOUT -b$BLOCKSIZE - tcp:$(echo $USERHOST | cut -d@ -f2):$PORT,rcvbuf=$BUF,sndbuf=$BUF
if [ "$VERIFY" = "1" ]; then
 echo ">>> Begin transfer verification check ..."
 if [ "$PK" = "0" ] || [ "$PK" = "" ]; then
  rsync -avu --progress --rsh="sshpass -e ssh" $SRC/ $USERHOST:$DEST/
 else
  rsync -avu --progress --rsh=ssh $SRC/ $USERHOST:$DEST/
 fi
fi
finish-up
echo ">>> Transfur complete."
